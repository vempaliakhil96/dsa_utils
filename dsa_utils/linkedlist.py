# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_linkedlist.ipynb.

# %% auto 0
__all__ = ['ListNode', 'make_linked_list', 'reverse_linked_list', 'make_random_linked_list']

# %% ../nbs/00_linkedlist.ipynb 3
import random

# %% ../nbs/00_linkedlist.ipynb 4
class ListNode:
    def __init__(self, 
                 val: int, #Value of the node
                 next=None): #Pointer to the next node
        self.val = val
        self.next = next
        
    def __str__(self):
        t = self.next
        _str = f"{self.val}-->"
        while t:
            _str += f"{t.val}-->"
            t = t.next
        return _str
    
    __repr__ = __str__

# %% ../nbs/00_linkedlist.ipynb 5
def make_linked_list(lst):
    """
    This function takes in a list of integers and returns a head ptr of linked list `ListNode` 
    """
    lst = lst[::-1]
    head = ListNode(lst.pop())
    curr = head
    while lst:
        curr.next = ListNode(lst.pop())
        curr = curr.next
    return head


# %% ../nbs/00_linkedlist.ipynb 8
def reverse_linked_list(ll: ListNode):
    """
    For a given linked list, reverse the list and return it's head pointer
    """
    curr = ll
    prev = None
    while curr:
        t = curr.next
        curr.next = prev
        prev = curr
        curr = t
    return prev

# %% ../nbs/00_linkedlist.ipynb 11
def make_random_linked_list(size: int=None #You can specify the size if you want
                           ):
    """
    Make a random linked list of size [1-1000]
    """
    size = random.randint(1, 1000) if size is None else size
    _list = random.sample(range(1, 10**6), size)
    return make_linked_list(_list)
